description: >+
  # Eks Troubleshooter 


  This automation helps troubleshoot common eks errors and enforce best
  practices

schemaVersion: '0.3'
assumeRole: 'arn:aws:iam::992445968102:role/ssm-automation-dummy-role'
parameters:
  clusterName:
    type: String
    description: Name of the cluster. This cluster must be running in your AWS account.
mainSteps:
  - name: getCallerDetails
    action: 'aws:executeAwsApi'
    inputs:
      Service: sts
      Api: GetCallerIdentity
    outputs:
      - Name: callerIdentity
        Selector: $
        Type: StringMap
    description: |-
      ### getCallerDetails

      Get details of the user/role calling this automation.
  - name: getClusterDetails
    action: 'aws:executeAwsApi'
    inputs:
      Service: eks
      Api: DescribeCluster
      name: '{{ clusterName }}'
    outputs:
      - Name: endpoint
        Selector: $.cluster.endpoint
        Type: String
    description: get cluster details
  - name: getClusterServices
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.6
      Handler: script_handler
      Script: |
        import base64
        import boto3
        import re
        from botocore.signers import RequestSigner
        import urllib.request
        import ssl
        import json

        def script_handler(events, context):
          headers = {'Authorization': 'Bearer ' + get_bearer_token('practice', 'us-east-1')}
          ep = events['endpoint']
          api_ep = ep + "/api/v1/namespaces/default/services"
          
          ctx = ssl.create_default_context()
          ctx.check_hostname = False
          ctx.verify_mode = ssl.CERT_NONE
          req = urllib.request.Request(api_ep, headers=headers)
          res = urllib.request.urlopen(req, context=ctx)
          data = json.load(res)
          return(data)

        def get_bearer_token(cluster_id, region):
            STS_TOKEN_EXPIRES_IN = 60
            session = boto3.session.Session()

            client = session.client('sts', region_name=region)
            service_id = client.meta.service_model.service_id

            signer = RequestSigner(
                service_id,
                region,
                'sts',
                'v4',
                session.get_credentials(),
                session.events
            )

            params = {
                'method': 'GET',
                'url': 'https://sts.{}.amazonaws.com/?Action=GetCallerIdentity&Version=2011-06-15'.format(region),
                'body': {},
                'headers': {
                    'x-k8s-aws-id': cluster_id
                },
                'context': {}
            }

            signed_url = signer.generate_presigned_url(
                params,
                region_name=region,
                expires_in=STS_TOKEN_EXPIRES_IN,
                operation_name=''
            )

            base64_url = base64.urlsafe_b64encode(signed_url.encode('utf-8')).decode('utf-8')

            # remove any base64 encoding padding:
            return 'k8s-aws-v1.' + re.sub(r'=*', '', base64_url)
      InputPayload:
        endpoint: '{{ getClusterDetails.endpoint }}'
    outputs:
      - Name: services
        Selector: $.Payload
        Type: StringMap
    description: Get k8s services
  - name: getClusterDetailsFromEks
    action: 'aws:executeAwsApi'
    outputs:
      - Name: clusterDetails
        Selector: $.cluster
        Type: StringMap
      - Name: name
        Selector: $.cluster.name
        Type: String
      - Name: endpoint
        Selector: $.cluster.endpoint
        Type: String
      - Name: roleArn
        Selector: $.cluster.roleArn
        Type: String
      - Name: vpcId
        Selector: $.cluster.resourceVpcConfig.vpcId
        Type: String
      - Name: subnetIds
        Selector: $.cluster.resourceVpcConfig.subnetIds
        Type: StringList
      - Name: clusterSecurityGroupId
        Selector: $.cluster.resourceVpcConfig.clusterSecurityGroupId
        Type: String
      - Name: securityGroupIds
        Selector: $.cluster.resourceVpcConfig.securityGroupIds
        Type: String
      - Name: arn
        Selector: $.cluster.arn
        Type: String
    inputs:
      Service: eks
      Api: DescribeCluster
      name: '{{ clusterName }}'
    description: >-
      ### getClusterDetailsFromEks


      Get the details of the given cluster from the EKS API. This is the state
      of the cluster as seen by EKS. 

